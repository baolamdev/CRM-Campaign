# Generated by Django 5.0 on 2023-12-29 08:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DynamicFilterExpr',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Report', max_length=128)),
                ('model', models.CharField(db_index=True, max_length=64)),
                ('is_global', models.BooleanField(db_index=True, default=False, help_text='Make filter accessible to all.', verbose_name='Global?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Filter',
                'verbose_name_plural': 'Filters',
            },
        ),
        migrations.CreateModel(
            name='DynamicFilterColumnSortOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(blank=True, max_length=64, null=True)),
                ('order', models.PositiveSmallIntegerField()),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynfilters.dynamicfilterexpr')),
            ],
            options={
                'verbose_name': 'Column sort order',
                'verbose_name_plural': 'Column sort orders',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='DynamicFilterColumn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(blank=True, max_length=64, null=True)),
                ('order', models.PositiveSmallIntegerField()),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynfilters.dynamicfilterexpr')),
            ],
            options={
                'verbose_name': 'Column',
                'verbose_name_plural': 'Columns',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='DynamicFilterTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('op', models.CharField(choices=[('-', '-'), ('!', 'NOT'), ('&', 'AND'), ('|', 'OR'), ('(', '('), (')', ')')], default='-', max_length=1)),
                ('field', models.CharField(blank=True, max_length=64, null=True)),
                ('lookup', models.CharField(choices=[('-', '---------'), ('=', 'Equals'), ('icontains', 'Contains'), ('istartswith', 'Starts with'), ('iendswith', 'Ends with'), ('in', 'One of'), ('-', '---------'), ('range', 'Date Range'), ('year', 'Date Year'), ('month', 'Date Month'), ('day', 'Date Day'), ('-', '---------'), ('isnull', 'Is NULL'), ('isnotnull', 'Is not NULL'), ('istrue', 'Is TRUE'), ('isfalse', 'Is FALSE'), ('-', '---------'), ('lt', 'Less Than'), ('gt', 'Greater Than'), ('lte', 'Less Than or Equal To'), ('gte', 'Greater Than or Equal To')], default='-', max_length=16)),
                ('value', models.CharField(blank=True, max_length=100, null=True)),
                ('bilateral', models.BooleanField(default=False)),
                ('order', models.PositiveSmallIntegerField(blank=True, db_index=True, default=0)),
                ('filter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dynfilters.dynamicfilterexpr')),
            ],
            options={
                'verbose_name': 'Field',
                'verbose_name_plural': 'Fields',
                'ordering': ('order',),
            },
        ),
    ]
